# **what?**
# This workflow generates a zip archive with all the python dependencies
# needed to run core + all adapters for linux, mac OS platforms (future ToDo: add Windows)

# **why?**
# Installing from pip can result in unpredictable installs/runtime environments.
# Each zip serves as a bundle of dependencies known to work. If any subsequent
# bundle breaks then a user can simply roll back to a prior release.

# **when?**
# This is currently triggered manually.

# **how**
# Call workflow dispatch. For input-version please use the semantic version
# representing the release of the dependency you want to incorporate into a new
# bundle. So if there has just been a release of dbt-core of 1.3.3 then pass that
# as the input version (without a `v` prefix).

name: Release a Bundle
permissions:
  packages: read
  contents: write
  pull-requests: read
on:
  workflow_dispatch:
    inputs:
      version_number:
        description: The release version number (i.e. 1.0.0b1).
        type: string
        required: true
  workflow_call:
    inputs:
      version_number:
        description: The release version number (i.e. 1.0.0b1).
        type: string
        required: true

jobs:
  build-python-matrix:
    name: Audit Version and Build Python Release Matrix
    runs-on: ubuntu-latest
    outputs:
      python_versions: ${{ steps.build-list.outputs.versions }}

    steps: 
      - name: "Audit Version And Parse Into Parts"
        id: semver
        uses: dbt-labs/actions/parse-semver@v1.1.0
        with:
          version: ${{ inputs.version_number }}
      
      - name: "Set Python Versions"
        # 1.0 to 1.3 support python 3.7 to 3.10 
        # 1.4 added support for python 3.11
        # 1.6 drops support for python 3.7
        # Note that Python 3.8 is manually added to the matrix so not included here
        id: build-list
        run: |
          if [[ ${{ steps.semver.outputs.minor }} < 4 ]]
          then
            py_versions='[3.7, 3.9, 3.10]'
          elif  [[ ${{ steps.semver.outputs.minor }} < 6 ]]
          then
            py_versions='[3.7, 3.9, 3.10, 3.11]'
          else
            py_versions='[3.9, 3.10, 3.11]'
          fi
          echo $py_versions
          echo "versions=$py_versions" >> "$GITHUB_OUTPUT"
      
      - name: Print Support of Python Versions Other Than 3.8
        run: |
          echo "${{ steps.build-list.outputs.versions }}"

  create-bundle:
    needs: [build-python-matrix]
    runs-on: ubuntu-latest
    env:
      GH_ACCESS_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    outputs:
      created_tag: ${{ steps.create-release.outputs.created_tag }}
    steps:
      - name: "Checkout Repo"
        uses: actions/checkout@v3

      - name: "Set up Python 3.8"
        uses: actions/setup-python@v4
        with:
          python-version: "3.8"

      - name: "Install Linux Dependencies"
        id: install-linux-deps
        run: |
          sudo apt-get update
          sudo apt-get install libsasl2-dev
          python -m pip install --user --upgrade pip
          pip install -r requirements.txt

      - name: "Create Release"
        id: create-release
        run: |
          python -m pip install -e . && \
          python -m release_creation.main \
           --input-version=${{ inputs.version_number }} \
           --operation=create
          source ./result.env
          echo "$CREATED_TAG" 
          echo "created_tag=$CREATED_TAG" >> $GITHUB_OUTPUT

      - name: "Test install from Github Release"
        uses: ./.github/actions/test_install
        with:
          version_number: ${{ steps.create-release.outputs.created_tag }}
          python_version: "3.8"
          os_platform: "linux"

      - name: "Post Notification"
        run: |
          title="Test Install Successful"
          message="Installation and version command run successful for os_platform=linux, Python="3.8", version=${{ steps.create-release.outputs.created_tag }}"
          echo "::notice $title::$message"

  build-for-os-and-python-versions:
    needs: [create-bundle, build-python-matrix]
    strategy:
      # run even if some fail so we get a full picture.  At thois point linux/3.8 si already released anyways so there's no reason to stop
      fail-fast: false
      matrix:
        python-version: ${{ fromJSON(needs.build-python-matrix.outputs.python_versions) }}
        os: ["macos-latest", "ubuntu-latest"]
        include:
          - python-version: 3.8
            os: macos-latest
    name: ${{ matrix.os }} - ${{ matrix.python-version }}
    env:
      GH_ACCESS_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    runs-on: ${{ matrix.os }}

    steps:
      - name: "Checkout Repo"
        uses: actions/checkout@v3

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: "${{ matrix.python-version }}"

      - name: "Install Linux Dependencies"
        if: matrix.os == 'ubuntu-latest'
        run: |
          echo "os_platform=linux" >> $GITHUB_ENV
          sudo apt-get update
          sudo apt-get install libsasl2-dev

      - name: "Install Mac Dependencies"
        if: matrix.os == 'macos-latest'
        run: |
          echo "os_platform=mac" >> $GITHUB_ENV

      - name: "Install Python Dependencies"
        run: |    
          python -m pip install --user --upgrade pip
          pip install -r requirements.txt

      - name: "Generate Bundle"
        run: |
          python -m pip install -e . && \
          python -m release_creation.main \
           --input-version=${{ inputs.version_number }} \
           --operation=update

      - name: "Test install from Github Release"
        uses: ./.github/actions/test_install
        with:
          version_number: ${{ needs.create-bundle.outputs.created_tag }}
          python_version: ${{ matrix.python-version }}
          os_platform: ${{ env.os_platform }}

      - name: "Post Notification"
        run: |
          title="Test Install Successful"
          message="Installation and version command run successful for os_platform=${{ matrix.os }}, Python=${{ matrix.python-version }}, version=${{ steps.create-release.outputs.created_tag }}"
          echo "::notice $title::$message"
